/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Module;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-12-03T22:30:26.029Z")

@Api(value = "modulo", description = "the modulo API")
@RequestMapping(value = "/prueba")
public interface ModuloApi {

    @ApiOperation(value = "Actualiza un modulo", nickname = "actualizarModulo", notes = "Actualiza los datos del modulo", tags={ "pruebamodulos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Id invalido"),
        @ApiResponse(code = 404, message = "modulo no encontrado"),
        @ApiResponse(code = 405, message = "error") })
    @RequestMapping(value = "/modulo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> actualizarModulo(@ApiParam(value = "Todos los datos a actualizar" ,required=true )  @Valid @RequestBody Module datosActualizarModulo);


    @ApiOperation(value = "Buscar todos los modulos por estado", nickname = "listarModulosEstado", notes = "Trae todos los modulos registrados en la base de datos por estado", response = Module.class, responseContainer = "List", tags={ "pruebamodulos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista de modulos", response = Module.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Estado no valido") })
    @RequestMapping(value = "/modulo/listarPorEstado",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Module>> listarModulosEstado(@NotNull @ApiParam(value = "Estado del modulo en el sistema", required = true, allowableValues = "Activo, Inactivo") @Valid @RequestParam(value = "Estado", required = true) String estado);


    @ApiOperation(value = "Crea un nuevo modulo", nickname = "registrarModulo", notes = "Registra la informacion de un modulo para registrarlo en el sistema", tags={ "pruebamodulos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/modulo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> registrarModulo(@ApiParam(value = "Todos los datos del modulo para realizar el registro del mismo" ,required=true )  @Valid @RequestBody Module datosModulo);

}
